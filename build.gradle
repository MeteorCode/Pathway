/////////////////////////////////////////////////////////////////////////////
// buildfile for
// PATHWAY
//
// (c) 2014 MeteorCode Laboratories
/////////////////////////////////////////////////////////////////////////////

/*
 * Gets the version name from the latest Git tag
 */
def getVersionName = { ->
    def stdout = new ByteArrayOutputStream()
    exec {
        commandLine 'git', 'describe', '--tags'
        standardOutput = stdout
    }
    return stdout.toString().trim()
}

apply plugin: "java"
apply plugin: "scala"
apply plugin: "eclipse"
apply plugin: "idea"
apply plugin: 'scoverage'
apply plugin: "com.github.kt3k.coveralls"
apply plugin: "com.github.maiflai.scalatest"


buildscript {
    repositories {
        mavenCentral()
        maven { url "https://oss.sonatype.org/content/repositories/snapshots/" }
        maven { url "https://plugins.gradle.org/m2/" }
    }

    dependencies {
        classpath 'org.beanshell:bsh:2+'
        classpath fileTree(dir: 'corelib', include: '*.jar')
        classpath 'org.kt3k.gradle.plugin:coveralls-gradle-plugin:2.0.1'
        classpath "com.github.maiflai:gradle-scalatest:0.7"
        classpath 'org.scoverage:gradle-scoverage:1.0.8'
    }
}


repositories {
    mavenLocal();
    mavenCentral()
    maven { url "https://oss.sonatype.org/content/repositories/snapshots/" }
    maven { url "http://dl.bintray.com/hawkw/maven" }
}

// define a configuration for scala compiler plugins
// the transitive=false means that the plugin won't show up
// as a dependency in the final output
configurations {
    //noinspection GroovyAssignabilityCheck
    scalaCompilerPlugins { transitive = false }
}

tasks.withType(ScalaDoc) {
    scalaDocOptions.setAdditionalParameters(["-doc-external-doc"])
}

dependencies {

    compile "org.scala-lang:scala-library:2.11.4"
    compile "org.beanshell:bsh:2+"
    compile fileTree(dir: 'corelib', include: '*.jar')

    // right now, the only scalac plugin we are using is genjavadoc
    scalaCompilerPlugins  group: 'com.typesafe.genjavadoc', name: 'genjavadoc-plugin_2.11.1', version:'0.8'

    testRuntime 'org.pegdown:pegdown:1.1.0'
    testCompile "org.mockito:mockito-all:1.9.5"
    testCompile "org.powermock:powermock-mockito-release-full:1.5.4+"
    testCompile group: 'org.scalatest', name: 'scalatest_2.11', version: '2.2.4'
    testCompile group: 'org.scalacheck', name: 'scalacheck_2.11', version: '1.12.2'
    testCompile group: 'me.hawkweisman', name: 'util_2.11', version: '0.1'

    scoverage 'org.scoverage:scalac-scoverage-plugin_2.11:1.0.4', 'org.scoverage:scalac-scoverage-runtime_2.11:1.0.4'
}

// stuff that should not have a JaCoCo test report generated
def jacocoExcludes = [ '**/test/**', '**/*Test*', '**/*$*', '**/ModLoader*', '**/sparks/**']


/////////////////////////////////////////////////////////////////////////
// Patch the stock Gradle :javadoc task to run genjavadoc and generate
// javadoc pages for Scala classes.
/////////////////////////////////////////////////////////////////////////
javadoc {
    description "Generates JavaDoc for all Java and Scala classes"

    // this string contains the plugin paths that get passed to the compiler
    def pluginPaths = configurations.scalaCompilerPlugins.files.collect { "\"-Xplugin:${it.path}\"" }

    compileScala {
        scalaCompileOptions.additionalParameters = pluginPaths + "\"-P:genjavadoc:out=$buildDir/genjavadoc\""
    }

    // tell JavaDoc to include the genjavadoc-created files in its' fileset.
    source = fileTree(dir: "src", include: '**/*.java', exclude: '**/test/**') + fileTree("$buildDir/genjavadoc")
    //options.addStringOption("quiet")
}

test {
    testLogging.showStandardStreams = true
    classpath = project.sourceSets.test.runtimeClasspath + files("src/test/resources")
}


ext {
    assetsDir = file("assets");
    appName = "Pathway"
    version = getVersionName()
}

/////////////////////////////////////////////////////////////////////////
// ARCHIVE TASKS:
// $ gradle pathwayJar - archive the main Pathway compiled jarfile
// $ gradle sourcesJar - archive the main sources (not test)
// $ gradle javadocJar - archive JavaDoc documentation
// $ gradle scaladocJar - archive ScalaDoc documentation
/////////////////////////////////////////////////////////////////////////
task pathwayJar(type: Jar) {
    description "Bundle Pathway library jarfile for distribution."
    //noinspection GroovyAssignabilityCheck
    dependsOn classes
    //noinspection GroovyAssignabilityCheck
    dependsOn test

    from files(sourceSets.main.output.classesDir)
    from files(sourceSets.main.output.resourcesDir)
    from {configurations.compile.collect {zipTree(it)}}
    //noinspection GroovyAssignabilityCheck
    from files(project.assetsDir);
}

task sourcesJar(type: Jar, dependsOn: classes) {
    description "Archive source into a jarfile."
    classifier = 'sources'
    from sourceSets.main.scala
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    description "Archive JavaDoc documentation into a jarfile."
    classifier = 'javadoc'
    from javadoc.destinationDir
}
task scaladocJar(type: Jar, dependsOn: scaladoc) {
    description "Archive ScalaDoc documentation into a jarfile."
    classifier = 'scaladoc'
    from scaladoc.destinationDir
}

task sparks(dependsOn: classes, type: JavaExec) {
    main = "com.meteorcode.pathway.samples.Sparks"
    classpath = sourceSets.main.runtimeClasspath
    standardInput = System.in
    workingDir = project.getProjectDir()
    ignoreExitValue = true
}

artifacts {
    archives pathwayJar
    archives sourcesJar
    archives javadocJar
    archives scaladocJar
}

tasks.withType(ScalaCompile) {
    // Fast Scala Compiler is disabled because Jenkins can't handle it :(
    //scalaCompileOptions.useCompileDaemon = true
}

sourceCompatibility = 1.7

sourceSets.main.scala.srcDir "src/main/java"
sourceSets.main.java.srcDirs = []
sourceSets.test.scala.srcDir "src/test/java"
sourceSets.test.java.srcDirs = []

jar {
    //noinspection GroovyAssignabilityCheck
    dependsOn test
}

//noinspection GroovyAssignabilityCheck
tasks.eclipse.dependsOn cleanEclipse

eclipse {
    //noinspection GroovyAssignabilityCheck
    project {
    	name = appName
    }

	classpath {
		defaultOutputDir = file('build-eclipse')
		downloadSources = true
		downloadJavadoc = true
	}
}
